openapi: 3.0.0
info:
  title: Expense Management System API
  version: 1.0.0
  description: API for managing expenses, incomes, and financial reports

servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /users/register:
    post:
      summary: "Register a new user"
      description: "Endpoint to register a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: "User registered successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"

  /users/login:
    post:
      summary: "Login a user"
      description: "Endpoint to login a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: "Invalid credentials"
        '500':
          description: "Server error"

  /cards:
    post:
      summary: "Create a new card"
      description: "Endpoint to create a new card"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                closingDay:
                  type: integer
                dueDay:
                  type: integer
                cardType:
                  type: string
                lastFourDigits:
                  type: string
                userId:
                  type: string
              required:
                - name
                - closingDay
                - dueDay
                - cardType
                - lastFourDigits
                - userId
      responses:
        '200':
          description: "Card created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  card:
                    $ref: '#/components/schemas/Card'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"
    get:
      summary: "Get all cards"
      description: "Endpoint to get all cards"
      responses:
        '200':
          description: "Cards retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '500':
          description: "Server error"

  /cards/{cardId}:
    put:
      summary: "Update a card"
      description: "Endpoint to update a card"
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                closingDay:
                  type: integer
                dueDay:
                  type: integer
                cardType:
                  type: string
                lastFourDigits:
                  type: string
                userId:
                  type: string
              required:
                - name
                - closingDay
                - dueDay
                - cardType
                - lastFourDigits
                - userId
      responses:
        '200':
          description: "Card updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  card:
                    $ref: '#/components/schemas/Card'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"
    delete:
      summary: "Delete a card"
      description: "Endpoint to delete a card"
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Card deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: "Server error"

  /expenses:
    post:
      summary: "Create a new expense"
      description: "Endpoint to create a new expense"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                amount:
                  type: number
                date:
                  type: string
                  format: date-time
                cardId:
                  type: string
                tag:
                  type: string
                installments:
                  type: object
                  properties:
                    current:
                      type: integer
                    total:
                      type: integer
                userId:
                  type: string
              required:
                - type
                - amount
                - date
                - userId
      responses:
        '200':
          description: "Expense created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  expense:
                    $ref: '#/components/schemas/Expense'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"
    get:
      summary: "Get all expenses"
      description: "Endpoint to get all expenses"
      responses:
        '200':
          description: "Expenses retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '500':
          description: "Server error"

  /expenses/{expenseId}:
    put:
      summary: "Update an expense"
      description: "Endpoint to update an expense"
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                userId:
                  type: string
              required:
                - amount
                - userId
      responses:
        '200':
          description: "Expense updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  expense:
                    $ref: '#/components/schemas/Expense'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"

  /incomes:
    post:
      summary: "Create a new income"
      description: "Endpoint to create a new income"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                date:
                  type: string
                  format: date-time
                source:
                  type: string
                tag:
                  type: string
                recurring:
                  type: object
                  properties:
                    isRecurring:
                      type: boolean
                    frequency:
                      type: string
                userId:
                  type: string
              required:
                - amount
                - date
                - userId
      responses:
        '200':
          description: "Income created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  income:
                    $ref: '#/components/schemas/Income'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"
    get:
      summary: "Get all incomes"
      description: "Endpoint to get all incomes"
      responses:
        '200':
          description: "Incomes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'
        '500':
          description: "Server error"

  /incomes/{incomeId}:
    put:
      summary: "Update an income"
      description: "Endpoint to update an income"
      parameters:
        - in: path
          name: incomeId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                userId:
                  type: string
              required:
                - amount
                - userId
      responses:
        '200':
          description: "Income updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  income:
                    $ref: '#/components/schemas/Income'
        '400':
          description: "Invalid input"
        '500':
          description: "Server error"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
      required:
        - id
        - username
        - email
        - role
    Card:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        closingDay:
          type: integer
        dueDay:
          type: integer
        cardType:
          type: string
        lastFourDigits:
          type: string
        userId:
          type: string
      required:
        - id
        - name
        - closingDay
        - dueDay
        - cardType
        - lastFourDigits
        - userId
    Expense:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date-time
        cardId:
          type: string
        tag:
          type: string
        installments:
          type: object
          properties:
            current:
              type: integer
            total:
              type: integer
        userId:
          type: string
      required:
        - id
        - type
        - amount
        - date
        - userId
    Income:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date-time
        source:
          type: string
        tag:
          type: string
        recurring:
          type: object
          properties:
            isRecurring:
              type: boolean
            frequency:
              type: string
        userId:
          type: string
      required:
        - id
        - amount
        - date
        - userId
